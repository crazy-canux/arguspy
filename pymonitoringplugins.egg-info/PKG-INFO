Metadata-Version: 1.1
Name: pymonitoringplugins
Version: 1.1.2.0
Summary: Common interface of tons protocals, used for monitoring tools, like nagios/icinga...
Home-page: https://github.com/crazy-canux/pymonitoringplugins
Author: Canux CHENG
Author-email: canuxcheng@gmail.com
License: GPL
Description: 
        .. image:: https://img.shields.io/pypi/v/pymonitoringplugins.svg?maxAge=2592000
           :target: https://pypi.python.org/pypi/pymonitoringplugins/1.1.1.0
        
        .. image:: https://coveralls.io/repos/github/crazy-canux/pymonitoringplugins/badge.svg?branch=master
            :target: https://coveralls.io/github/crazy-canux/pymonitoringplugins?branch=master
        
        ===================
        pymonitoringplugins
        ===================
        
        pymonitoringplugins is pure python code.
        
        It's a API packge for monitoring plugins, like nagios or icinga.
        
        `[awesome-monitoring] <https://github.com/crazy-canux/awesome-monitoring>`_.
        
        --------------
        How to install
        --------------
        
        Use pip to install:
        
            pip install pymonitoringplugins
        
        ----------
        How to use
        ----------
        
        Just import what protocol you need::
        
            from pymonitoringplugins.ftp_ftplib import Ftp
            from pymonitoringplugins.mssql_pymssql import Mssql
            from pymonitoringplugins.mysql_pymysql import Mysql
            from pymonitoringplugins.ssh_paramiko import Ssh
            from pymonitoringplugins.winrm_pywinrm import WinRM
            from pymonitoringplugins.wmi_sh import Wmi
            from pymonitoringplugins.wmi_subprocess import Wmi
        
        Then write your own function monitoring class::
        
            class YourClass(Ftp/Mssql/Ssh/WinRM/Wmi/...):
                def __init__(self):
                    super(YourClass, self).__init__()
                    self.logger.debug("Init YourClass.")
        
                def define_sub_options(self):
                    super(YourClass, self).define_sub_options()
                    self.your_parser = self.subparsers.add_parser(...)
                    self.your_parser.add_argument(...)
                    ...
        
                def your_handle(self):
                    """Put your function monitoring code here."""
                    # Default status is ok.
                    status = self.ok
                    # Call the method and get the monitoring data.
                    ...
                    #  Compare with the warning and critical value and change the status.
                    ...
                    self.shortoutput = "..."
                    self.longoutput.append(...)
                    self.perfdata.append(...)
                    self.logger.debug("Return status and output.")
                    status(self.output())
        
        If you put more than one function monitoring class in one file(Not recommend)::
        
            class Register(YourClass1, YourClass2, ...):
                def __init__(self):
                    super(Register, self).__init__()
        
        Last step::
        
            def main():
                # For multiple inherit
                # plugin = Register()
                plugin = YourClass()
                arguments = sys.argv[1:]
                if 'your' in arguments:
                    plugin.your_handle()
                elif 'your2' in arguments:
                    plugin.your2_handle()
                else:
                    plugin.unknown("Unknown actions.")
        
            if __name__ == "__main__":
                main()
        
        --------------
        How to extends
        --------------
        
        Check the TODO list, you can give test examples or documents.
        
        Also you can pull request for your code.
        
        -----
        TODO
        -----
        
        1. pymonitoringplugins/docs build with sphinx(2.0)
        2. http(1.2)
        3. snmp(1.3)
        4. vmware-vsphere(1.4)
        
        ============
        Contribution
        ============
        
        `[Contribution] <https://github.com/crazy-canux/pymonitoringplugins/blob/master/CONTRIBUTING.rst>`_
        
        =======
        Authors
        =======
        
        `[Authors] <https://github.com/crazy-canux/pymonitoringplugins/blob/master/AUTHORS.rst>`_
        
        =======
        License
        =======
        
        `[License] <https://github.com/crazy-canux/pymonitoringplugins/blob/master/LICENSE>`_
        
Keywords: monitoring nagios icinga plugins
Platform: any
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Plugins
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Topic :: System :: Monitoring
